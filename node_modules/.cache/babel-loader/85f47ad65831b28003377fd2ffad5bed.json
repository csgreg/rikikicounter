{"ast":null,"code":"var _jsxFileName = \"/Users/csgergo/Documents/projects/repo_adu/adu/adu/src/Waitroom/Wait.js\",\n    _s = $RefreshSig$();\n\nimport { CopyToClipboard } from \"react-copy-to-clipboard\";\nimport { Footer } from \"../Footer\";\nimport { useHistory } from \"react-router\";\nimport { useState } from \"react\";\nimport 'bulma/css/bulma.min.css';\nimport { BrowserRouter, Route, Switch } from \"react-router-dom\";\nimport React from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport function Wait({\n  socket,\n  setRoomId,\n  roomId,\n  players,\n  setPlayers,\n  game,\n  setGame\n}) {\n  _s();\n\n  const history = useHistory();\n  const [isCopied, setIsCopied] = useState(false);\n\n  const onCopyText = () => {\n    setIsCopied(true);\n    setTimeout(() => {\n      setIsCopied(false);\n    }, 1000);\n  };\n\n  if (game.gameStarted && !game.game) {\n    console.log(\"omw\");\n    game.game = true;\n    history.push(\"/game\");\n  }\n\n  function handleBossStarts() {\n    game.gameStarted = true;\n    socket.emit(\"sync-state\", roomId, `{\"game\": ${JSON.stringify(game)}, \"players\": ${JSON.stringify(players)} }`, false, response => {\n      console.log(\"synced\");\n    });\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"wait\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      id: \"waittitle\",\n      className: \"title is-1\",\n      children: \"V\\xE1rakoz\\xE1s a t\\xF6bbi j\\xE1t\\xE9kosra\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"joinedplayers\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        id: \"waitcode\",\n        children: [\"A szoba k\\xF3dja: \", roomId]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        id: \"waitedplayer\",\n        children: \"J\\xE1t\\xE9kosok:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: players.map(p => /*#__PURE__*/_jsxDEV(\"li\", {\n          className: \"waitinglayerlist\",\n          children: p.name\n        }, p.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 9\n      }, this), players.map(p => p.boss === true && p.socketid === socket.id ? /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => handleBossStarts(),\n        className: \"button is-warning is-rounded\",\n        id: \"startbutton\",\n        children: \"Ind\\xEDt\\xE1s\"\n      }, p.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 61\n      }, this) : \"\")]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Footer, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 40,\n    columnNumber: 13\n  }, this);\n}\n\n_s(Wait, \"Q7jwlitCz1LeT0CvLjOwxt3uTLM=\", false, function () {\n  return [useHistory];\n});\n\n_c = Wait;\n\nvar _c;\n\n$RefreshReg$(_c, \"Wait\");","map":{"version":3,"sources":["/Users/csgergo/Documents/projects/repo_adu/adu/adu/src/Waitroom/Wait.js"],"names":["CopyToClipboard","Footer","useHistory","useState","BrowserRouter","Route","Switch","React","Wait","socket","setRoomId","roomId","players","setPlayers","game","setGame","history","isCopied","setIsCopied","onCopyText","setTimeout","gameStarted","console","log","push","handleBossStarts","emit","JSON","stringify","response","map","p","name","id","boss","socketid"],"mappings":";;;AAAA,SAASA,eAAT,QAAgC,yBAAhC;AACA,SAASC,MAAT,QAAuB,WAAvB;AACA,SAASC,UAAT,QAA2B,cAA3B;AACA,SAASC,QAAT,QAAyB,OAAzB;AACA,OAAO,yBAAP;AACA,SAASC,aAAT,EAAwBC,KAAxB,EAA+BC,MAA/B,QAA6C,kBAA7C;AACA,OAAOC,KAAP,MAAkB,OAAlB;;AAGA,OAAO,SAASC,IAAT,CAAc;AAACC,EAAAA,MAAD;AAASC,EAAAA,SAAT;AAAoBC,EAAAA,MAApB;AAA4BC,EAAAA,OAA5B;AAAqCC,EAAAA,UAArC;AAAiDC,EAAAA,IAAjD;AAAuDC,EAAAA;AAAvD,CAAd,EAA8E;AAAA;;AAEjF,QAAMC,OAAO,GAAGd,UAAU,EAA1B;AACA,QAAM,CAACe,QAAD,EAAWC,WAAX,IAA0Bf,QAAQ,CAAC,KAAD,CAAxC;;AAEA,QAAMgB,UAAU,GAAG,MAAM;AACvBD,IAAAA,WAAW,CAAC,IAAD,CAAX;AACAE,IAAAA,UAAU,CAAC,MAAM;AACfF,MAAAA,WAAW,CAAC,KAAD,CAAX;AACD,KAFS,EAEP,IAFO,CAAV;AAGD,GALD;;AAOA,MAAGJ,IAAI,CAACO,WAAL,IAAoB,CAACP,IAAI,CAACA,IAA7B,EAAkC;AAChCQ,IAAAA,OAAO,CAACC,GAAR,CAAY,KAAZ;AACAT,IAAAA,IAAI,CAACA,IAAL,GAAY,IAAZ;AACAE,IAAAA,OAAO,CAACQ,IAAR,CAAa,OAAb;AACD;;AAGD,WAASC,gBAAT,GAA2B;AACzBX,IAAAA,IAAI,CAACO,WAAL,GAAiB,IAAjB;AACAZ,IAAAA,MAAM,CAACiB,IAAP,CAAY,YAAZ,EAA0Bf,MAA1B,EACK,YAAWgB,IAAI,CAACC,SAAL,CAAed,IAAf,CAAqB,gBAAea,IAAI,CAACC,SAAL,CAAehB,OAAf,CAAwB,IAD5E,EACiF,KADjF,EAEKiB,QAAD,IAAc;AACZP,MAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ;AACD,KAJL;AAMD;;AAGD,sBAAQ;AAAK,IAAA,SAAS,EAAC,MAAf;AAAA,4BACR;AAAI,MAAA,EAAE,EAAC,WAAP;AAAmB,MAAA,SAAS,EAAC,YAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADQ,eAEN;AAAK,MAAA,SAAS,EAAC,eAAf;AAAA,8BACE;AAAG,QAAA,EAAE,EAAC,UAAN;AAAA,yCACkBZ,MADlB;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAKE;AAAG,QAAA,EAAE,EAAC,cAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cALF,eAME;AAAA,kBACGC,OAAO,CAACkB,GAAR,CAAaC,CAAD,iBACT;AAAe,UAAA,SAAS,EAAC,kBAAzB;AAAA,oBAA6CA,CAAC,CAACC;AAA/C,WAASD,CAAC,CAACE,EAAX;AAAA;AAAA;AAAA;AAAA,gBADH;AADH;AAAA;AAAA;AAAA;AAAA,cANF,eAWE;AAAA;AAAA;AAAA;AAAA,cAXF,EAYGrB,OAAO,CAACkB,GAAR,CAAaC,CAAD,IACPA,CAAC,CAACG,IAAF,KAAW,IAAX,IAAmBH,CAAC,CAACI,QAAF,KAAe1B,MAAM,CAACwB,EAAzC,gBAA8C;AAAmB,QAAA,OAAO,EAAE,MAAMR,gBAAgB,EAAlD;AAAsD,QAAA,SAAS,EAAC,8BAAhE;AAA+F,QAAA,EAAE,EAAC,aAAlG;AAAA;AAAA,SAAaM,CAAC,CAACE,EAAf;AAAA;AAAA;AAAA;AAAA,cAA9C,GAAiL,EADtL,CAZH;AAAA;AAAA;AAAA;AAAA;AAAA,YAFM,eAkBN,QAAC,MAAD;AAAA;AAAA;AAAA;AAAA,YAlBM;AAAA;AAAA;AAAA;AAAA;AAAA,UAAR;AAoBH;;GAlDezB,I;UAEIN,U;;;KAFJM,I","sourcesContent":["import { CopyToClipboard } from \"react-copy-to-clipboard\";\nimport { Footer } from \"../Footer\";\nimport { useHistory } from \"react-router\";\nimport { useState } from \"react\";\nimport 'bulma/css/bulma.min.css';\nimport { BrowserRouter, Route, Switch } from \"react-router-dom\";\nimport React from \"react\";\n\n\nexport function Wait({socket, setRoomId, roomId, players, setPlayers, game, setGame}){\n\n    const history = useHistory();\n    const [isCopied, setIsCopied] = useState(false);\n  \n    const onCopyText = () => {\n      setIsCopied(true);\n      setTimeout(() => {\n        setIsCopied(false);\n      }, 1000);\n    };\n\n    if(game.gameStarted && !game.game){\n      console.log(\"omw\");\n      game.game = true;\n      history.push(\"/game\");\n    }\n\n\n    function handleBossStarts(){\n      game.gameStarted=true;\n      socket.emit(\"sync-state\", roomId,\n          `{\"game\": ${JSON.stringify(game)}, \"players\": ${JSON.stringify(players)} }`, false,\n          (response) => {\n            console.log(\"synced\");\n          }\n      );\n    }\n\n\n    return( <div className=\"wait\">\n    <h1 id=\"waittitle\" className=\"title is-1\">Várakozás a többi játékosra</h1>\n      <div className=\"joinedplayers\">\n        <p id=\"waitcode\">\n          A szoba kódja: {roomId}\n          \n        </p>\n        <p id=\"waitedplayer\">Játékosok:</p>\n        <ul>\n          {players.map((p) =>\n              <li key={p.id} className=\"waitinglayerlist\">{p.name}</li>\n          )}\n        </ul>\n        <br/>\n        {players.map((p) =>\n              p.boss === true && p.socketid === socket.id ? <button key={p.id} onClick={() => handleBossStarts()} className=\"button is-warning is-rounded\" id=\"startbutton\">Indítás</button> : \"\"\n        )}\n      </div>\n      <Footer />\n    </div>);\n}"]},"metadata":{},"sourceType":"module"}