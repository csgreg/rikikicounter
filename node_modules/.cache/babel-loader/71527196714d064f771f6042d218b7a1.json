{"ast":null,"code":"var _jsxFileName = \"/Users/csgergo/Documents/projects/repo_adu/adu/adu/src/Game/Game.js\",\n    _s = $RefreshSig$();\n\nimport { useState } from \"react\";\nimport React from 'react';\nimport { Tip } from \"./Tip\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport function Game({\n  socket,\n  setRoomId,\n  roomId,\n  players,\n  setPlayers,\n  game,\n  setGame,\n  currentPlayerNum\n}) {\n  _s();\n\n  const possibilities = ['♠︎', '♡', '♣', '♦', 'Nincs adu!'];\n  const [hit, setHit] = useState(0);\n\n  function handleNext() {\n    game.laps += 1;\n    setGame(game);\n    socket.emit(\"sync-state\", roomId, `{\"game\": ${JSON.stringify(game)}, \"players\": ${JSON.stringify(players)} }`, false, response => {\n      console.log(\"state synced\");\n    });\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"game\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        className: \"gameadus\",\n        children: [\"ADU: \", possibilities[game.laps % 5]]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 24,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n        className: \"gameadus\",\n        children: [\"Lapok sz\\xE1ma: \", Math.floor(52 / players.length) - game.laps]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 25,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n        className: \"gameadus\",\n        children: \"Pontok\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 26,\n        columnNumber: 9\n      }, this), players.map(p => /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"displaypoint\",\n        children: [p.name, \": \", p.point]\n      }, p.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 13\n      }, this)), /*#__PURE__*/_jsxDEV(Tip, {\n        socket: socket,\n        setRoomId: setRoomId,\n        roomId: roomId,\n        players: players,\n        setPlayers: setPlayers,\n        game: game,\n        setGame: setGame,\n        currentPlayerNum: currentPlayerNum\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        id: \"hitinput\",\n        onChange: event => setHit(event.target.value),\n        className: \"input is-rounded is-warning\",\n        type: \"text\",\n        placeholder: \"Tal\\xE1lat\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 161\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        id: \"hitbtn\",\n        className: \"button is-warning is-rounded startbtn\",\n        children: \"R\\xF6gz\\xEDt\\xE9s\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 9\n      }, this), players.map(p => p.boss === true && p.socketid === socket.id ? /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => handleNext(),\n        className: \"button is-warning is-rounded\",\n        id: \"nextbutton\",\n        children: \"K\\xF6vetkez\\u0151 k\\xF6r\"\n      }, p.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 61\n      }, this) : \"\")]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 22,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Game, \"6XJKTjJ9A8jgoTEE81NsWtwtpkU=\");\n\n_c = Game;\n\nvar _c;\n\n$RefreshReg$(_c, \"Game\");","map":{"version":3,"sources":["/Users/csgergo/Documents/projects/repo_adu/adu/adu/src/Game/Game.js"],"names":["useState","React","Tip","Game","socket","setRoomId","roomId","players","setPlayers","game","setGame","currentPlayerNum","possibilities","hit","setHit","handleNext","laps","emit","JSON","stringify","response","console","log","Math","floor","length","map","p","name","point","id","event","target","value","boss","socketid"],"mappings":"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","sourcesContent":["import { useState } from \"react\";\nimport React from 'react';\nimport { Tip } from \"./Tip\";\n\nexport function Game({socket, setRoomId, roomId, players, setPlayers, game, setGame, currentPlayerNum}){\n\n    const possibilities = ['♠︎','♡','♣','♦','Nincs adu!'];\n    \n    const [hit, setHit] = useState(0);\n\n    function handleNext(){\n        game.laps+=1;\n        setGame(game);\n        socket.emit(\"sync-state\", roomId, `{\"game\": ${JSON.stringify(game)}, \"players\": ${JSON.stringify(players)} }`, false,\n            (response) => {\n                console.log(\"state synced\");\n            }\n        );\n    }\n\n    return(\n    <div className=\"game\">\n        <div>\n        <h1 className=\"gameadus\">ADU: {possibilities[game.laps % 5]}</h1>\n        <h1 className=\"gameadus\">Lapok száma: {Math.floor(52/players.length)-game.laps}</h1>\n        <h1 className=\"gameadus\">Pontok</h1>\n        {players.map((p) => \n            <p key={p.id} className=\"displaypoint\">{p.name}: {p.point}</p>\n        )}\n\n        <Tip socket={socket} setRoomId={setRoomId} roomId={roomId} players={players} setPlayers={setPlayers} game={game} setGame={setGame} currentPlayerNum={currentPlayerNum} />\n\n        \n        <input id=\"hitinput\" onChange={(event) => setHit(event.target.value)} className=\"input is-rounded is-warning\" type=\"text\" placeholder=\"Találat\"></input><br></br>\n        <button id=\"hitbtn\" className=\"button is-warning is-rounded startbtn\">Rögzítés</button>\n        <br />\n        {players.map((p) =>\n              p.boss === true && p.socketid === socket.id ? <button key={p.id} onClick={() => handleNext()} className=\"button is-warning is-rounded\" id=\"nextbutton\">Következő kör</button> : \"\"\n        )}\n        \n        </div>\n    </div>\n)\n}"]},"metadata":{},"sourceType":"module"}